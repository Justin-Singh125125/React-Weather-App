{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","Form","props","onSubmit","getWeather","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","_callee","e","api_call","data","temp","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","main","toPrecision","_this","setState","sys","weather","stop","this","components_Titles","components_Form","components_Weather","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.64021d82.chunk.js","sourcesContent":["import React from \"react\";\n\n//functional component because we are not using state \n\nconst Titles = () => {\n    return (\n        <div>\n            <h1 className=\"title-container__title\">Weather Finder</h1>\n            <p className=\"title-container__subtitle\">Find out temperature, conditions and more...</p>\n        </div>\n    );\n}\nexport default Titles;","import React from \"react\";\n\n//functional component because we are not using state \nconst Form = (props) => {\n    return (\n        <form onSubmit={props.getWeather}>\n            <input name=\"city\" placeholder=\"City...\" />\n            <input name=\"country\" placeholder=\"Country...\" />\n            <button>Get Weather</button>\n        </form>\n    );\n}\n\nexport default Form;\n\n\n","import React from \"react\";\n//functional component because we are not using state \n\nconst Weather = (props) => {\n    return (\n        <div className=\"weather__info\">\n            {/* if statements that check if the contents are undefined, if not, displays data */}\n            {\n                props.city && props.country &&\n                <p className=\"weather__key\"> Location: <span className=\"weather__value\">{props.city}, {props.country}</span></p>\n            }\n\n            {\n                props.temperature &&\n                <p className=\"weather__key\"> temperature: <span className=\"weather__value\">{props.temperature}</span></p>\n            }\n            {\n                props.humidity &&\n                <p className=\"weather__key\"> Humidity: <span className=\"weather__value\">{props.humidity}</span></p>\n            }\n            {\n                props.description &&\n                <p className=\"weather__key\"> Conditions: <span className=\"weather__value\">{props.description}</span></p>\n            }\n            {\n                props.error &&\n                <p className=\"weather__key\">Please Enter Values</p>\n            }\n        </div>\n    );\n}\nexport default Weather;","//holds all internal components\n\n//imports the react npm from the json\nimport React from \"react\";\nimport Titles from \"./components/Titles.js\";\nimport Form from \"./components/Form.js\";\nimport Weather from \"./components/Weather.js\"\n\n\n//class is a reserved key word in js\n//creating an instance of app\nconst API_KEY = \"cda01a9fb2673b4daa19b55da5e57049\";\n\nclass App extends React.Component {\n    state = {\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: undefined\n    }\n\n    getWeather = async (e) => {\n        e.preventDefault();\n        const city = e.target.elements.city.value;\n        const country = e.target.elements.country.value;\n        //this is an api call\n        const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`);\n        //convert to json\n        const data = await api_call.json();\n\n\n\n        if (city && country) {\n            //temp variable to hold kelvin temp so i can convert\n            var temp = (data.main.temp);\n            //converts kelvin to fahrenheit\n            temp = (((temp - 273.15) * (9 / 5)) + 32).toPrecision(2);\n\n\n            this.setState({\n                temperature: temp,\n                city: data.name,\n                country: data.sys.country,\n                humidity: data.main.humidity,\n                description: data.weather[0].description,\n                error: \"\"\n            })\n        } else {\n            this.setState({\n                temperature: undefined,\n                city: undefined,\n                country: undefined,\n                humidity: undefined,\n                description: undefined,\n                error: \"Please Enter the Value\"\n            })\n        }\n\n    }\n    //returns jsx\n    render() {\n        //you can only return one parent element\n        return (\n            <div>\n                <div className=\"wrapper\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-md-5 title-container\">\n                                <Titles />\n                            </div>\n                            <div className=\"col-md-7 form-container\">\n                                {/* we have access to this function in the form component now */}\n                                <Form getWeather={this.getWeather} />\n                                <Weather temperature={this.state.temperature}\n                                    city={this.state.city}\n                                    country={this.state.country}\n                                    humidity={this.state.humidity}\n                                    description={this.state.description}\n                                    error={this.state.error} />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n//makes this component available for other file to import\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\"\n//importing our app\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}